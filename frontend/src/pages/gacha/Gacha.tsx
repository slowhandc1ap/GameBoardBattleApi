// src/pages/gacha/Index.tsx
import { useState } from "react";
import GachaButton from "./GachaButton";
import GachaPopup from "./GachaPopup";
import MetaCharacter from "./MetaCharacter";
import UserInfoHeader from "./UserInfo";


export default function GachaPage() {
  const [result, setResult] = useState<any>(null);
  const [isDrawing, setIsDrawing] = useState(false);

  const handleDraw = async () => {
    setIsDrawing(true);

    const savedUser = localStorage.getItem("user");
    const userId = savedUser ? JSON.parse(savedUser).id : null;

    if (!userId) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏∏‡πà‡∏°‡∏Å‡∏≤‡∏ä‡∏≤");
      setIsDrawing(false);
      return;
    }

    try {
      const res = await fetch("http://localhost:3000/gacha/draw", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId }),
      });

      const data = await res.json();
      setResult(data);

      // üîÅ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï user info ‡πÉ‡∏ô localStorage
      if (data.freeGachaLeft !== undefined && data.coinLeft !== undefined) {
        const user = JSON.parse(localStorage.getItem("user") || "{}");
        const updatedUser = {
          ...user,
          freeGachaUse: data.freeGachaLeft,
          coin: data.coinLeft,
        };
        localStorage.setItem("user", JSON.stringify(updatedUser));
      }
    } catch (err) {
      console.error("‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô", err);
    } finally {
      setTimeout(() => {
        setIsDrawing(false);
      }, 1500);
    }
  };

  return (
    <div className="min-h-screen  bg-[url('/images/bg-galaxy.gif')] bg-cover bg-center text-white py-6 px-4 flex flex-col items-center">
      {/* Header User */}
      <UserInfoHeader />

      {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏á */}
      <div className="w-full max-w-4xl bg-transparent rounded-lg shadow-md p-6 mt-4">
        <h1 className="text-2xl font-bold text-center mb-4">
          üåå ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏ä‡∏≤‡πÅ‡∏´‡πà‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ß‡∏≤‡∏•
        </h1>

        {/* Preview ‡∏ï‡∏±‡∏ß‡∏•‡∏∞‡∏Ñ‡∏£ (mockup) */}
        <MetaCharacter />

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏∏‡πà‡∏° */}
        <div className="flex justify-center mt-6">
          <GachaButton onClick={handleDraw} disabled={isDrawing} />
        </div>

        {/* ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏ì‡∏∞‡∏™‡∏∏‡πà‡∏° */}
        {isDrawing && (
          <p className="text-center mt-4 text-sm animate-pulse">üåÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏∏‡πà‡∏°...</p>
        )}
      </div>

      {/* Popup ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• */}
      {result && !isDrawing && (
        <GachaPopup result={result} onClose={() => setResult(null)} />
      )}

      <div className="button"></div>
      
    </div>
  );
}
